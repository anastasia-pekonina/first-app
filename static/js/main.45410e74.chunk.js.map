{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","reportWebVitals.js","index.js"],"names":["Info","React","Component","Form","onSubmit","this","props","weatherMethod","type","name","placeholder","Weather","className","city","sity","country","temp","pressure","sunset","error","API_KEY","App","state","undefined","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","sys","date","Date","setTime","sunset_date","getHours","getMinutes","getSeconds","setState","form","main","class","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAYeA,E,uKARP,OACI,8BACI,kM,GAJGC,IAAMC,WCUVC,E,uKARP,OACI,uBAAMC,SAAUC,KAAKC,MAAMC,cAA3B,UACG,uBAAOC,KAAM,OAAOC,KAAK,OAAOC,YAAa,mCAC7C,kI,GALIT,IAAMC,WCiBVS,E,uKAfP,OACI,sBAAKC,UAAU,YAAf,UACEP,KAAKC,MAAMO,MACb,gCACA,uHAAoBR,KAAKC,MAAMQ,KAA/B,IAAsCT,KAAKC,MAAMS,WACjD,qGAAiBV,KAAKC,MAAMU,QAC5B,mFAAcX,KAAKC,MAAMW,YACzB,sGAAkBZ,KAAKC,MAAMY,aAGrC,mBAAGN,UAAU,QAAb,SAAsBP,KAAKC,MAAMa,e,GAZflB,IAAMC,WCGtBkB,EAAU,mCA6EDC,E,4MA1EbC,MAAQ,CACNN,UAAKO,EACLV,UAAKU,EACLR,aAAQQ,EACRN,cAASM,EACTL,YAAOK,EACPJ,MAAM,oI,EAERK,e,uCAAiB,WAAOC,GAAP,yBAAAC,EAAA,yDACfD,EAAEE,mBACId,EAAOY,EAAEG,OAAOC,SAAShB,KAAKiB,OAFrB,iCAMnBC,MAAM,oDAAD,OAAqDlB,EAArD,kBAAmEO,EAAnE,kBANc,cAKTY,EALS,gBAOAA,EAAQC,OAPR,OAObC,EAPa,OASfhB,EAASgB,EAAKC,IAAIjB,QAClBkB,EAAO,IAAIC,MACVC,QAAQpB,GACTqB,EAAcH,EAAKI,WAAa,IAAMJ,EAAKK,aAAe,IAAML,EAAKM,aAGzE,EAAKC,SAAS,CACdC,KAAKV,EAAKW,KAAK7B,KACfA,KAAKkB,EAAKW,KAAK7B,KACfH,KAAKqB,EAAKzB,KACVM,QAAQmB,EAAKC,IAAIpB,QACjBE,SAASiB,EAAKW,KAAK5B,SACnBC,OAAOqB,EACPpB,WAAMI,IAtBa,wBA0Bb,EAAKoB,SAAS,CACZ3B,UAAKO,EACLV,UAAKU,EACLR,aAAQQ,EACRN,cAASM,EACTL,YAAOK,EACPJ,MAAM,qIAhCK,4C,6GAsCX,OACF,qBAAKP,UAAU,UAAf,SACE,qBAAKA,UAAU,OAAf,SACE,qBAAKA,UAAU,YAAf,SACE,qBAAKA,UAAU,MAAf,SACE,sBAAKA,UAAU,WAAWkC,MAAM,OAAhC,UACA,8BACE,cAAC,EAAD,MAEF,sBAAKlC,UAAU,WAAWkC,MAAM,OAAhC,UACA,cAAC,EAAD,CAAMvC,cAAgBF,KAAKmB,iBAC3B,cAAC,EAAD,CACAR,KAAMX,KAAKiB,MAAMN,KACjBH,KAAMR,KAAKiB,MAAMT,KACjBE,QAASV,KAAKiB,MAAMP,QACpBE,SAAUZ,KAAKiB,MAAML,SACrBC,OAAQb,KAAKiB,MAAMJ,OACnBC,MAAOd,KAAKiB,MAAMH,0B,GAjEdlB,IAAMC,WCMT6C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,YCEdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.45410e74.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Info extends React.Component{\n    render(){\n        return(\n            <div>\n                <h2>Узнайте погоду в своем городе</h2>\n            \n            </div>\n        )\n    }\n}\nexport default Info;","import React from \"react\";\n\nclass Form extends React.Component{\n    render(){\n        return(\n            <form onSubmit={this.props.weatherMethod}>\n               <input type =\"text\" name=\"city\" placeholder =\"Город\"/>\n               <button>Получить погоду</button>\n            </form>\n        );\n    }\n}\nexport default Form;","import React from \"react\";\n\nclass Weather extends React.Component{\n    render(){\n        return(\n            <div className=\"infoWeath\">\n            { this.props.city && \n            <div>\n            <p>Местоположение: {this.props.sity} {this.props.country}</p>\n            <p>Температура: {this.props.temp}</p> \n            <p>Давление: {this.props.pressure}</p>\n            <p>Заход солнца: {this.props.sunset}</p>\n            </div>\n    }\n    <p className=\"error\">{this.props.error}</p>\n    </div>\n        );\n    }\n}\nexport default Weather;","import React from \"react\";\nimport Info from \"./components/info\";\nimport Form from \"./components/form\";\nimport Weather from \"./components/weather\";\n\nconst API_KEY = \"6f86315b4016a308d6e9356baa655d19\";\nclass App extends React.Component{\n  \n  state = {\n    temp:undefined,\n    city:undefined,\n    country:undefined,\n    pressure:undefined,\n    sunset:undefined,\n    error:\"Введите название города\"\n  }\n  gettingWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n\n    if(city){\n    const api_url = await \nfetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\nconst data = await api_url.json();\n\nlet sunset = data.sys.sunset;\nlet date = new Date();\ndate.setTime(sunset);\nlet sunset_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n\n\nthis.setState({\nform:data.main.temp,\ntemp:data.main.temp,\ncity:data.name,\ncountry:data.sys.country,\npressure:data.main.pressure,\nsunset:sunset_date,\nerror:undefined\n  });\n    }\n    else{\n      this.setState({\n        temp:undefined,\n        city:undefined,\n        country:undefined,\n        pressure:undefined,\n        sunset:undefined,\n        error:\"Введите название города\"\n    });\n\n  }\n}\n  render(){\n        return(\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"conteiner\">\n            <div className=\"row\">\n              <div className=\"col-lg-7\" class=\"info\">\n              <div>\n                <Info />\n                </div>\n              <div className=\"col-lg-5\" class=\"form\">\n              <Form weatherMethod= {this.gettingWeather}/>\n              <Weather\n              temp={this.state.temp}\n              city={this.state.city}\n              country={this.state.country}\n              pressure={this.state.pressure}\n              sunset={this.state.sunset}\n              error={this.state.error}\n              />\n           </div> \n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n          );\n    }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}